#!/bin/sh /etc/rc.common
# Copyright 2020-2022 Stan Grishin (stangri@melmac.ca)
# shellcheck disable=SC2039,SC1091,SC2018,SC2019,SC3043,SC3057,SC3060
PKG_VERSION='dev-test'

# sysctl net.ipv4.conf.default.rp_filter=1
# sysctl net.ipv4.conf.all.rp_filter=1

# shellcheck disable=SC2034
START=94
# shellcheck disable=SC2034
USE_PROCD=1

if type extra_command >/dev/null 2>&1; then
	extra_command 'status' "Generates output required to troubleshoot routing issues
		Use '-d' option for more detailed output
		Use '-p' option to automatically upload data under VPR paste.ee account
			WARNING: while paste.ee uploads are unlisted, they are still publicly available
		List domain names after options to include their lookup in report"
	extra_command 'version' 'Show version information'
	extra_command 'reload_interface' 'Reload specific interface only'
else
# shellcheck disable=SC2034
	EXTRA_COMMANDS='reload_interface status version'
# shellcheck disable=SC2034
	EXTRA_HELP="	status	Generates output required to troubleshoot routing issues
		Use '-d' option for more detailed output
		Use '-p' option to automatically upload data under VPR paste.ee account
			WARNING: while paste.ee uploads are unlisted, they are still publicly available
		List domain names after options to include their lookup in report"
fi

readonly packageName='pbr'
readonly serviceName="$packageName $PKG_VERSION"
readonly jsonFile="/var/run/${packageName}.json"
readonly dnsmasqFile="/var/dnsmasq.d/${packageName}"
readonly sharedMemoryOutput="/dev/shm/$packageName-output"
readonly _OK_='\033[0;32m\xe2\x9c\x93\033[0m'
readonly _FAIL_='\033[0;31m\xe2\x9c\x97\033[0m'
readonly __OK__='\033[0;32m[\xe2\x9c\x93]\033[0m'
readonly __FAIL__='\033[0;31m[\xe2\x9c\x97]\033[0m'
readonly _ERROR_='\033[0;31mERROR\033[0m'
readonly _WARNING_='\033[0;33mWARNING\033[0m'
# shellcheck disable=SC2155
readonly nft="$(command -v nft)"
readonly nftTable="fw4"
readonly setPrefix='pbr'
readonly chainPrefix='pbr'

gatewaySummary=''; errorSummary=''; warningSummary='';
serviceEnabled=''; verbosity=''; strictMode=''; ipv6Enabled=''; 
wanTableID=''; wanMark=''; wanPriority=''; fwMask=''; fwMaskXor='';
resolverSet=''; resolverSetSupported='0';
wanIface4=''; wanIface6=''; ifaceMark=''; ifaceTableID=''; ifacePriority='';
ifAll=''; ifSupported=''; ignoredIfaces=''; supportedIfaces=''; icmpIface='';
wanGW4=''; wanGW6=''; bootTimeout=''; ruleCreateOption=''; secureReload='';
webuiChainColumn=''; webuiShowIgnore='';
procdReloadDelay=''; serviceStartTrigger='';
processPolicyError=''; processPolicyWarning='';
usedChainsList='PREROUTING'; configLoaded='0';

version() { echo "$PKG_VERSION"; }
output_ok() { output 1 "$_OK_"; output 2 "$__OK__\\n"; }
output_okn() { output 1 "$_OK_\\n"; output 2 "$__OK__\\n"; }
output_fail() { s=1; output 1 "$_FAIL_"; output 2 "$__FAIL__\\n"; }
output_failn() { output 1 "$_FAIL_\\n"; output 2 "$__FAIL__\\n"; }
str_replace() { printf "%b" "$1" | sed -e "s/$(printf "%b" "$2")/$(printf "%b" "$3")/g"; }
str_replace() { echo "${1//$2/$3}"; }
str_contains() { [ -n "$1" ] &&[ -n "$2" ] && [ "${1//$2}" != "$1" ]; }
str_contains_word() { echo "$1" | grep -q -w "$2"; }
str_to_lower() { echo "$1" | tr 'A-Z' 'a-z'; }
str_extras_to_underscore() { echo "$1" | tr '[\. ~`!@#$%^&*()\+/,<>?//;:]' '_'; }
str_extras_to_space() { echo "$1" | tr ';{}' ' '; }

output() {
# Can take a single parameter (text) to be output at any verbosity
# Or target verbosity level and text to be output at specifc verbosity
	local msg memmsg logmsg
	if [ "$#" -ne 1 ]; then
		if [ $((verbosity & $1)) -gt 0 ] || [ "$verbosity" = "$1" ]; then shift; else return 0; fi
	fi
	[ -t 1 ] && printf "%b" "$1"
	msg="${1//$serviceName /service }";
	if [ "$(printf "%b" "$msg" | wc -l)" -gt 0 ]; then
		[ -s "$sharedMemoryOutput" ] && memmsg="$(cat "$sharedMemoryOutput")"
		logmsg="$(printf "%b" "${memmsg}${msg}" | sed 's/\x1b\[[0-9;]*m//g')"
		logger -t "${packageName:-service}" "$(printf "%b" "$logmsg")"
		rm -f "$sharedMemoryOutput"
	else
		printf "%b" "$msg" >> "$sharedMemoryOutput"
	fi
}
is_present() { command -v "$1" >/dev/null 2>&1; }
is_installed() { [ -s "/usr/lib/opkg/info/${1}.control" ]; }
is_variant_installed() { [ "$(echo /usr/lib/opkg/info/"${1}"*.control)" != "/usr/lib/opkg/info/${1}*.control" ]; }

build_ifAll() { ifAll="${ifAll}${1} "; }
build_ifSupported() { is_supported_interface "$1" && ifSupported="${ifSupported}${1} "; }
pbr_find_iface() {
	local iface i param="$2"
	[ "$param" = 'wan6' ] || param='wan'
	"network_find_${param}" iface
	is_tunnel "$iface" && unset iface
	if [ -z "$iface" ]; then
		for i in $ifAll; do
			if "is_${param}" "$i"; then break; else unset i; fi
		done
	fi
	eval "$1"='${iface:-$i}'
}
pbr_get_gateway() {
	local iface="$2" dev="$3" gw
	network_get_gateway gw "$iface" true
#	if [ -z "$gw" ] || [ "$gw" = '0.0.0.0' ]; then
#		gw="$(ubus call "network.interface.${iface}" status | jsonfilter -e "@.route[0].nexthop")"
#	fi
	if [ -z "$gw" ] || [ "$gw" = '0.0.0.0' ]; then
		gw="$(ip -4 a list dev "$dev" 2>/dev/null | grep inet | awk '{print $2}' | awk -F "/" '{print $1}')"
	fi
	eval "$1"='$gw'
}
pbr_get_gateway6() {
	local iface="$2" dev="$3" gw
	network_get_gateway6 gw "$iface" true
	if [ -z "$gw" ] || [ "$gw" = '::/0' ] || [ "$gw" = '::0/0' ] || [ "$gw" = '::' ]; then
		gw="$(ip -6 a list dev "$dev" 2>/dev/null | grep inet6 | awk '{print $2}')"
	fi
	eval "$1"='$gw'
}
is_dslite() { local proto; proto=$(uci -q get network."$1".proto); [ "${proto:0:6}" = "dslite" ]; }
is_l2tp() { local proto; proto=$(uci -q get network."$1".proto); [ "${proto:0:4}" = "l2tp" ]; }
is_oc() { local proto; proto=$(uci -q get network."$1".proto); [ "${proto:0:11}" = "openconnect" ]; }
is_ovpn() { local dev; network_get_device dev "$1"; [ "${dev:0:3}" = "tun" ] || [ "${dev:0:3}" = "tap" ] || [ -f "/sys/devices/virtual/net/${dev}/tun_flags" ]; }
is_pptp() { local proto; proto=$(uci -q get network."$1".proto); [ "${proto:0:4}" = "pptp" ]; }
is_softether() { local dev; network_get_device dev "$1"; [ "${dev:0:4}" = "vpn_" ]; }
is_tor() { [ "$(str_to_lower "$1")" = "tor" ]; }
is_tor_running() { 
	local ret=0
	if [ -s "/etc/tor/torrc" ]; then
		json_load "$(ubus call service list "{ 'name': 'tor' }")"
		json_select 'tor'; json_select 'instances'; json_select 'instance1';
		json_get_var ret 'running'; json_cleanup
	fi
	if [ "$ret" = "0" ]; then return 1; else return 0; fi
}
is_wg() { local proto; proto=$(uci -q get network."$1".proto); [ "${proto:0:9}" = "wireguard" ]; }
is_tunnel() { is_dslite "$1" || is_l2tp "$1" || is_oc "$1" || is_ovpn "$1" || is_pptp "$1" || is_softether "$1" || is_tor "$1" || is_wg "$1"; }
is_wan() { [ "$1" = "$wanIface4" ] || { [ "${1##wan}" != "$1" ] && [ "${1##wan6}" = "$1" ]; } || [ "${1%%wan}" != "$1" ]; }
is_wan6() { [ -n "$wanIface6" ] && [ "$1" = "$wanIface6" ] || [ "${1/#wan6}" != "$1" ] || [ "${1/%wan6}" != "$1" ]; }
is_ignored_interface() { str_contains_word "$ignoredIfaces" "$1"; }
is_supported_interface() { str_contains_word "$supportedIfaces" "$1" || { ! is_ignored_interface "$1" && { is_wan "$1" || is_wan6 "$1" || is_tunnel "$1"; }; }; }
is_mac_address() { expr "$1" : '[0-9A-F][0-9A-F]:[0-9A-F][0-9A-F]:[0-9A-F][0-9A-F]:[0-9A-F][0-9A-F]:[0-9A-F][0-9A-F]:[0-9A-F][0-9A-F]$' >/dev/null; }
is_ipv4() { expr "$1" : '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' >/dev/null; }
is_ipv6() { ! is_mac_address "$1" && str_contains "$1" ":"; }
is_family_mismatch() { ( is_netmask "${1//!}" && is_ipv6 "${2//!}" ) || ( is_ipv6 "${1//!}" && is_netmask "${2//!}" ); }
is_ipv6_link_local() { [ "${1:0:4}" = "fe80" ]; }
is_ipv6_unique_local() { [ "${1:0:2}" = "fc" ] || [ "${1:0:2}" = "fd" ]; }
is_ipv6_global() { [ "${1:0:4}" = "2001" ]; }
# is_ipv6_global() { is_ipv6 "$1" && ! is_ipv6_link_local "$1" && ! is_ipv6_link_local "$1"; }
is_netmask() { local ip="${1%/*}"; [ "$ip" != "$1" ] && is_ipv4 "$ip"; }
is_domain() { str_contains "$1" '[a-zA-Z]'; }
is_phys_dev() { [ "${1:0:1}" = "@" ] && ip l show | grep -E -q "^\\d+\\W+${1:1}"; }
dnsmasq_kill() { killall -q -s HUP dnsmasq; }
dnsmasq_restart() { output 3 'Restarting DNSMASQ '; if /etc/init.d/dnsmasq restart >/dev/null 2>&1; then output_okn; else output_failn; fi; }
is_default_dev() { [ "$1" = "$(ip -4 r | grep -m1 'dev' | grep -Eso 'dev [^ ]*' | awk '{print $2}')" ]; }
is_supported_iface_dev() { local n dev; for n in $ifSupported; do network_get_device dev "$n"; [ "$1" = "$dev" ] && return 0; done; return 1; }
is_supported_protocol() { grep -o '^[^#]*' /etc/protocols | grep -w -v '0' | grep . | awk '{print $1}' | grep -q "$1"; }
is_service_running() { "$nft" list table inet "$nftTable" | grep -q "${chainPrefix}_prerouting" >/dev/null 2>&1; }
append_chains_targets() {
	local chain iface name enabled
	config_get name "$1" 'name' 'blank'
	config_get chain "$1" 'chain' 'PREROUTING'
	config_get iface "$1" 'interface'
	config_get_bool enabled "$1" 'enabled' 1
	[ "$enabled" -ne 0 ] || return
	if ! str_contains_word "$usedChainsList" "$chain"; then
		usedChainsList="$usedChainsList $chain"
		if [ "$chain" != 'PREROUTING' ] && [ "$webuiChainColumn" != '1' ]; then
			warningSummary="${warningSummary}$_WARNING_: Chain '$chain' is used by a policy '$name', but a WebUI setting to show chains column (webui_chain_column) is disabled!\\n"
		fi
	fi
	if [ "$iface" = 'ignore' ] && ! str_contains_word "$supportedIfaces" 'ignore'; then
		supportedIfaces="$supportedIfaces ignore"
		if [ "$webuiShowIgnore" != '1' ]; then
			warningSummary="${warningSummary}$_WARNING_: The 'ignore' target is used by a policy '$name', but a WebUI setting to show 'ignore' target (webui_show_ignore_target) is disabled!\\n"
		fi
	fi
}
# shellcheck disable=SC2016
resolveip_to_nftset() { resolveip "$1" "$2" | sed -n 'H;${x;s/\n/,/g;s/^,//;p;};d' | tr '\n' ' '; }
# shellcheck disable=SC3037
#ports_to_nftset() { echo -ne "$value" | tr ',' ' '; }
ports_to_nftset() { echo -ne "$value"; }

# TODO: fix secure load
insert_lock() {
	local s=0 lan_subnet wan_device
	[ "$secureReload" -ne 0 ] || return 0
	output 3 'Activating Secure Reload '
	network_get_subnet lan_subnet "lan"
	network_get_physdev wan_device "wan"
	iptables -N "${chainPrefix}_killswitch" >/dev/null 2>&1 || s=1
	iptables -A "${chainPrefix}_killswitch" -s "$lan_subnet" -o "$wan_device" -j REJECT >/dev/null 2>&1 || s=1
	iptables -I FORWARD -j "${chainPrefix}_killswitch" >/dev/null 2>&1 || s=1
	if [ "$s" -eq 0 ]; then
		output_okn
	else
		output_failn
	fi
}

remove_lock() {
	local s=0
	if [ "$secureReload" -ne 0 ]; then
		output 3 'Deactivating Secure Reload '
	fi
	iptables -D FORWARD -j "${chainPrefix}_killswitch" >/dev/null 2>&1 || s=1
	iptables -F "${chainPrefix}_killswitch" >/dev/null 2>&1 || s=1
	iptables -X "${chainPrefix}_killswitch" >/dev/null 2>&1 || s=1
	if [ "$secureReload" -ne 0 ]; then
		if [ "$s" -eq 0 ]; then
			output_okn
		else
			output_failn
		fi
	fi
}

check_config() { local en; config_get_bool en "$1" 'enabled' 1; [ "$en" -gt 0 ] && _cfg_enabled=0; }

is_config_enabled() {
	local cfg="$1" _cfg_enabled=1
	[ -n "$1" ] || return 1
	config_load "$packageName"
	config_foreach check_config "$cfg"
	return "$_cfg_enabled"
}

load_package_config() {
	[ "$configLoaded" -eq 0 ] || return 0

	config_load "$packageName"
	config_get_bool serviceEnabled      'config' 'enabled' '0'
	config_get_bool strictMode          'config' 'strict_enforcement' '1'
	config_get_bool ipv6Enabled         'config' 'ipv6_enabled' '0'
	config_get_bool secureReload        'config' 'secure_reload' '0'
	config_get resolverSet              'config' 'resolver_set' 'dnsmasq.nftset'
	config_get verbosity                'config' 'verbosity' '2'
	config_get wanTableID               'config' 'wan_tid' '201'
	config_get wanMark                  'config' 'wan_mark' '0x010000'
	config_get wanPriority              'config' 'wan_ip_rules_priority' '30000'
	config_get fwMask                   'config' 'fw_mask' '0xff0000'
	config_get icmpIface                'config' 'icmp_interface'
	config_get ignoredIfaces            'config' 'ignored_interface'
	config_get supportedIfaces          'config' 'supported_interface'
	config_get bootTimeout              'config' 'boot_timeout' '30'
	config_get ruleCreateOption         'config' 'rule_create_option' 'add'
	config_get procdReloadDelay         'config' 'procd_reload_delay' '0'
	config_get_bool webuiChainColumn    'config' 'webui_chain_column' '0'
	config_get_bool webuiShowIgnore     'config' 'webui_show_ignore_target' '0'

	config_foreach append_chains_targets 'policy'

	if [ -z "${verbosity##*[!0-9]*}" ] || [ "$verbosity" -lt 0 ] || [ "$verbosity" -gt 2 ]; then
		verbosity=2
	fi

	[ "$ipv6Enabled" -gt 0 ] || unset ipv6Enabled

	fwMaskXor="$(printf '%#x' "$((fwMask ^ 0xffffffff))")"
	fwMaskXor="${fwMaskXor:-0xff00ffff}"

	if [ ! -x "$nft" ]; then
		errorSummary="${errorSummary}${_ERROR_}: This version of $packageName supports only nftables, but nft binary cannot be found!\\n"
		serviceEnabled=0
		return
	fi

	. /lib/functions/network.sh
	. /usr/share/libubox/jshn.sh
	mkdir -p "${jsonFile%/*}"
	mkdir -p "${dnsmasqFile%/*}"

	if [ -n "$icmpIface" ] && ! str_contains_word "$usedChainsList" 'OUTPUT'; then
		usedChainsList="$usedChainsList OUTPUT"
	fi

	# TODO: rework/delete insert option
	case $ruleCreateOption in
		insert|add) :;;
		*) ruleCreateOption='add';;
	esac

	case $resolverSet in
		none) : ;;
		dnsmasq.nftset|*)
			if ! dnsmasq -v 2>/dev/null | grep -q 'no-nftset' && dnsmasq -v 2>/dev/null | grep -q 'nftset'; then
				resolverSetSupported='1'
			fi
		;;
	esac

	if [ "$resolverSet" != 'none' ] && [ "$resolverSetSupported" -ne 1 ]; then
			errorSummary="${errorSummary}${_ERROR_}: Resolver set support (${resolverSet}) is enabled in $packageName, but this resolver set is not supported on this system!\\n"
		resolverSet='none'
	fi

	configLoaded='1'
}

is_enabled() {
	load_package_config
	if [ "$serviceEnabled" -eq 0 ]; then
		if [ "$1" = 'on_start' ]; then
			errorSummary="${errorSummary}${_ERROR_}: ${packageName} is currently disabled.\\n"
			errorSummary="${errorSummary}Enable ${packageName} from WebUI or run the following commands:\\n"
			errorSummary="${errorSummary}uci set $packageName.config.enabled='1'; uci commit $packageName;\\n"
		fi
		return 1
	fi
}

load_network() {
	if [ -z "$ifAll" ]; then
		config_load 'network'
		config_foreach build_ifAll 'interface'
	fi
	pbr_find_iface wanIface4 'wan'
	[ -n "$ipv6Enabled" ] && pbr_find_iface wanIface6 'wan6'
	[ -n "$wanIface4" ] && network_get_gateway wanGW4 "$wanIface4"
	[ -n "$wanIface6" ] && network_get_gateway6 wanGW6 "$wanIface6"
	wanGW="${wanGW4:-$wanGW6}"
	unset ifSupported
	config_load 'network'
	config_foreach build_ifSupported 'interface'
}

is_wan_up() {
	local sleepCount='1'
	load_network
	while [ -z "$wanGW" ] ; do
		load_network
		if [ $((sleepCount)) -gt $((bootTimeout)) ] || [ -n "$wanGW" ]; then break; fi
		output "$serviceName waiting for wan gateway...\\n"
		sleep 1
		network_flush_cache
		sleepCount=$((sleepCount+1))
	done
	if [ -n "$wanGW" ]; then
		return 0
	else
		errorSummary="${errorSummary}${_ERROR_}: ${serviceName} failed to discover WAN gateway!\\n"
		return 1
	fi
}

nft() { "$nft" "$@" >/dev/null 2>&1; }
nft4() { "$nft" "$@" >/dev/null 2>&1; }
nft6() { if [ -n "$ipv6Enabled" ] && [ -n "$*" ]; then "$nft" "$@" >/dev/null 2>&1; else return 1; fi }

nftset() {
	local command="$1" iface="$2" target="${3:-dst}" type="${4:-ip}" uid="$5" comment="$6" param="$7" mark="$7"
	local nftset4 nftset6 i
	local ipv4_error=1 ipv6_error=1
	nftset4="${setPrefix}${iface:+_$iface}_4${target:+_$target}${type:+_$type}${uid:+_$uid}"
	nftset6="${setPrefix}${iface:+_$iface}_6${target:+_$target}${type:+_$type}${uid:+_$uid}"

	case "$command" in
		add)
			nft4 add element inet "$nftTable" "$nftset4" "{ $param }" && ipv4_error=0
			nft6 add element inet "$nftTable" "$nftset6" "{ $param }" && ipv6_error=0
		;;
		add_resolver)
			[ "$resolverSetSupported" -eq 0 ] && return 1
			case "$resolverSet" in
				dnsmasq.nftset)
					[ -n "$ipv6Enabled" ] || unset nftset6
					echo "nftset=/${param}/4#inet#${nftTable}#${nftset4}${nftset6:+,6#inet#${nftTable}#$nftset6} # $comment" >> "$dnsmasqFile" && ipv4_error=0
				;;
				*) return 1;;
			esac
		;;
		create)
			case "$type" in
				ip|net)
					nft4 add set inet "$nftTable" "$nftset4" "{ type ipv4_addr; flags interval; comment \"$comment\" ;}" && ipv4_error=0
					nft6 add set inet "$nftTable" "$nftset6" "{ type ipv6_addr; flags interval; comment \"$comment\" ;}" && ipv6_error=0
					;;
				mac)
					nft4 add set inet "$nftTable" "$nftset4" "{ type ether_addr; flags interval; comment \"$comment\" ;}" && ipv4_error=0
					nft6 add set inet "$nftTable" "$nftset6" "{ type ether_addr; flags interval; comment \"$comment\" ;}" && ipv6_error=0
					;;
				esac
		;;
		create_resolver)
			[ "$resolverSetSupported" -eq 0 ] && return 1
			case "$resolverSet" in
				dnsmasq.nftset)
					nft4 add set inet "$nftTable" "$nftset4" "{ type ipv4_addr; flags interval; comment \"$comment\" ;}" && ipv4_error=0
					nft6 add set inet "$nftTable" "$nftset6" "{ type ipv6_addr; flags interval; comment \"$comment\" ;}" && ipv6_error=0
				;;
				*) return 1;;
			esac
		;;
		create_user_set)
			case "$type" in
				ip|net)
					nft4 add set inet "$nftTable" "$nftset4" "{ type ipv4_addr; flags interval; comment \"$comment\" ;}" && ipv4_error=0
					nft6 add set inet "$nftTable" "$nftset6" "{ type ipv6_addr; flags interval; comment \"$comment\" ;}" && ipv6_error=0
					case "$target" in
						dst)
							nft add rule inet "$nftTable" "${chainPrefix}_prerouting" ip daddr "@${nftset4}" goto "${chainPrefix}_mark_${mark}" && ipv4_error=0
							nft add rule inet "$nftTable" "${chainPrefix}_prerouting" ip daddr "@${nftset6}" goto "${chainPrefix}_mark_${mark}" && ipv6_error=0
						;;
						src)
							nft add rule inet "$nftTable" "${chainPrefix}_prerouting" ip saddr "@${nftset4}" goto "${chainPrefix}_mark_${mark}" && ipv4_error=0
							nft add rule inet "$nftTable" "${chainPrefix}_prerouting" ip saddr "@${nftset6}" goto "${chainPrefix}_mark_${mark}" && ipv6_error=0
						;;
					esac
					;;
				mac)
					nft4 add set inet "$nftTable" "$nftset4" "{ type ether_addr; flags interval; comment \"$comment\" ;}" && ipv4_error=0
					nft6 add set inet "$nftTable" "$nftset6" "{ type ether_addr; flags interval; comment \"$comment\" ;}" && ipv6_error=0
					nft add rule inet "$nftTable" "${chainPrefix}_prerouting" ether saddr "@${nftset4}" goto "${chainPrefix}_mark_${mark}" && ipv4_error=0
					nft add rule inet "$nftTable" "${chainPrefix}_prerouting" ether saddr "@${nftset6}" goto "${chainPrefix}_mark_${mark}" && ipv6_error=0
					;;
				esac
		;;
		delete|delete_user_set|destroy)
			nft delete set inet "$nftTable" "$nftset4" && ipv4_error=0
			nft delete set inet "$nftTable" "$nftset6" && ipv6_error=0
		;;
		flush_user_set)
			nft flush set inet "$nftTable" "$nftset4" && ipv4_error=0
			nft flush set inet "$nftTable" "$nftset6" && ipv6_error=0
		;;
		flush)
			nft flush set inet "$nftTable" "$nftset4" && ipv4_error=0
			nft flush set inet "$nftTable" "$nftset6" && ipv6_error=0
		;;
	esac
	return $ipv4_error || $ipv6_error
}

policy_routing_tor() {
	local comment="$1" iface="$2" src_addr="$3" src_port="$4" dst_addr="$5" dst_port="$6"
# shellcheck disable=SC2155
	local proto="$(str_to_lower "$7")" chain="${8:-PREROUTING}" uid="$9"
	if [ -n "${src_addr}${src_port}${dst_port}" ]; then
		processPolicyWarning="${processPolicyWarning}${_WARNING_}: Please unset 'src_addr', 'src_port' and 'dest_port' for policy '$comment'\\n"
	fi
	if [ -n "$proto" ] && [ "$proto" != "all" ]; then
		processPolicyWarning="${processPolicyWarning}${_WARNING_}: Please unset 'proto' or set 'proto' to 'all' for policy '$comment'\\n"
	fi
	if [ "$chain" != "PREROUTING" ]; then
		processPolicyWarning="${processPolicyWarning}${_WARNING_}: Please unset 'chain' or set 'chain' to 'PREROUTING' for policy '$comment'\\n"
	fi
	ips 'add' "$iface" 'dst' 'net' '' "${comment}: $dst_addr" "$dst_addr" || processPolicyError="${processPolicyError}${_ERROR_}: ips 'add' '$iface' 'dst' 'net' '${comment}: $dst_addr' '$dst_addr'\\n"
	return 0
}

policy_routing() {
	local name="$1" iface="$2" src_addr="$3" src_port="$4" dst_addr="$5" dst_port="$6"
# shellcheck disable=SC2155
	local proto="$(str_to_lower "$7")" chain="$(str_to_lower "$8")" uid="$9"
	local mark i negation value dest nftInsertOption='add'
	local ip4Flag='ip' ip6Flag='ip6'
	local param4="${chainPrefix}_${chain:-prerouting}"
	local param6="${chainPrefix}_${chain:-prerouting}"
	mark=$(eval echo "\$mark_${iface//-/_}")

	if [ -z "$ipv6Enabled" ] && { is_ipv6 "$src_addr" || is_ipv6 "$dst_addr"; }; then
		processPolicyError="${processPolicyError}${_ERROR_}: Skipping IPv6 policy '$name' as IPv6 support is disabled\\n"
		return 1
	fi

	if [ -n "$mark" ]; then
		dest="goto ${chainPrefix}_mark_${mark}"
	elif [ "$iface" = "ignore" ]; then
		dest="return"
	else
		processPolicyError="${processPolicyError}${_ERROR_}: Unknown packet mark for ${iface}\\n"
		return 1
	fi

	if is_family_mismatch "$src_addr" "$dst_addr"; then 
		processPolicyError="${processPolicyError}${_ERROR_}: Mismatched IP family between '$src_addr' and '$dst_addr' in policy '$name'\\n"
		return 1
	fi

	if [ -n "$proto" ] && ! is_supported_protocol "$proto"; then
		processPolicyError="${processPolicyError}${_ERROR_}: Unknown protocol '$i' in policy '$name'\\n"
		return 1
	fi

	if [ -n "$src_addr" ]; then
		if [ "${src_addr:0:1}" = "!" ]; then
			negation='!='; value="${src_addr:1}"
		else
			unset negation; value="$src_addr";
		fi
		if is_phys_dev "$value"; then
			param4="$param4 iifname $negation ${value:1}"
			param6="$param6 iifname $negation ${value:1}"
		elif is_mac_address "$value"; then
			local target='src' type='mac'
			if nftset 'create' "$iface" "$target" "$type" "$uid" "${name}: $src_addr" && \
				nftset 'add' "$iface" "$target" "$type" "$uid" "${name}: $src_addr" "$value"; then
				param4="$param4 ether $negation saddr @${setPrefix}_${iface}_4_${target}_${type}_${uid}"
				param6="$param6 ether $negation saddr @${setPrefix}_${iface}_6_${target}_${type}_${uid}"
		else
				param4="$param4 ether saddr $negation $value"
				param6="$param6 ether saddr $negation $value"
			fi
		else
			local target='src' type='ip'
			if nftset 'create' "$iface" "$target" "$type" "$uid" "${name}: $src_addr" && \
				nftset 'add' "$iface" "$target" "$type" "$uid" "${name}: $src_addr" "$value"; then
				param4="$param4 $ip4Flag $negation saddr @${setPrefix}_${iface}_4_${target}_${type}_${uid}"
				param6="$param6 $ip6Flag $negation saddr @${setPrefix}_${iface}_6_${target}_${type}_${uid}"
				unset ip4Flag
				unset ip6Flag
			else
				param4="$param4 $ip4Flag saddr $negation $value"
				param6="$param6 $ip6Flag saddr $negation $value"
				unset ip4Flag
				unset ip6Flag
			fi
		fi
	fi

	if [ -n "$dst_addr" ]; then 
		if [ "${dst_addr:0:1}" = "!" ]; then
			negation='!='; value="${dst_addr:1}"
		else
			unset negation; value="$dst_addr";
		fi
		if is_phys_dev "$value"; then
			param4="$param4 oifname $negation ${value:1}"
			param6="$param6 oifname $negation ${value:1}"
		elif is_domain "$value"; then
			local target='dst' type='ip'
			if nftset 'create_resolver' "$iface" "$target" "$type" "$uid" "${name}: $dst_addr" && \
				nftset 'add_resolver' "$iface" "$target" "$type" "$uid" "${name}: $dst_addr" "$value"; then
				param4="$param4 $ip4Flag $negation daddr @${setPrefix}_${iface}_4_${target}_${type}_${uid}"
				param6="$param6 $ip6Flag $negation daddr @${setPrefix}_${iface}_6_${target}_${type}_${uid}"
				unset ip4Flag
				unset ip6Flag
			elif nftset 'create' "$iface" "$target" "$type" "$uid" "${name}: $dst_addr" && \
				nftset 'add' "$iface" "$target" "$type" "$uid" "${name}: $dst_addr" "$value"; then
				param4="$param4 $ip4Flag $negation daddr @${setPrefix}_${iface}_4_${target}_${type}_${uid}"
				param6="$param6 $ip6Flag $negation daddr @${setPrefix}_${iface}_6_${target}_${type}_${uid}"
				unset ip4Flag
				unset ip6Flag
			else
				param4="$param4 $ip4Flag $negation daddr {$(resolveip_to_nftset '-4' "$value")}"
				param6="$param6 $ip6Flag $negation daddr {$(resolveip_to_nftset '-6' "$value")}"
				unset ip4Flag
				unset ip6Flag
			fi
		else
			local target='dst' type='ip'
			if nftset 'create' "$iface" "$target" "$type" "$uid" "${name}: $dst_addr" && \
				nftset 'add' "$iface" "$target" "$type" "$uid" "${name}: $dst_addr" "$value"; then
				param4="$param4 $ip4Flag $negation daddr @${setPrefix}_${iface}_4_${target}_${type}_${uid}"
				param6="$param6 $ip6Flag $negation daddr @${setPrefix}_${iface}_6_${target}_${type}_${uid}"
				unset ip4Flag
				unset ip6Flag
			else
				param4="$param4 $ip4Flag $negation daddr $value"
				param6="$param6 $ip6Flag $negation daddr $value"
				unset ip4Flag
				unset ip6Flag
			fi
		fi
	fi

	if [ -n "${src_port}${dst_port}" ]; then
		proto="${proto:-tcp}"
	fi

	if [ -n "$src_port" ]; then
		if [ "${src_port:0:1}" = "!" ]; then
			negation='!='; value="${src_port:1}"
		else
			unset negation; value="$src_port";
		fi
		param4="$param4 $proto sport $negation {$(ports_to_nftset "$value")}"
		param6="$param6 $proto sport $negation {$(ports_to_nftset "$value")}"
		unset proto
	fi

	if [ -n "$dst_port" ]; then
		if [ "${dst_port:0:1}" = "!" ]; then
			negation='!='; value="${dst_port:1}"
		else
			unset negation; value="$dst_port";
		fi
		param4="$param4 $proto dport $negation {$(ports_to_nftset "$value")}"
		param6="$param6 $proto dport $negation {$(ports_to_nftset "$value")}"
	fi

#		if [ -n "$name" ]; then
#			param="$param -m comment --comment $(str_extras_to_underscore "$name")"
#			param6="$param6 -m comment --comment $(str_extras_to_underscore "$name")"
#		fi

	param4="$nftInsertOption rule inet $nftTable $param4 $dest"
	param6="$nftInsertOption rule inet $nftTable $param6 $dest"

	if [ -z "$ipv6Enabled" ]; then
		nft "$param4" || processPolicyError="${processPolicyError}${_ERROR_}: nft $param4\\n"
	else
		nft "$param4" || processPolicyError="${processPolicyError}${_ERROR_}: nft $param4\\n"
		nft "$param6" || processPolicyError="${processPolicyError}${_ERROR_}: nft $param6\\n"
	fi
}

policy_process() {
	local name="$1" iface="$2" src_addr="$3" src_port="$4" dst_addr="$5" dst_port="$6"
	local proto="$7" chain="$8" uid="$9"
	local i j enabled

	if [ -z "$uid" ]; then # we're called from config_foreach, get all variables
		config_get      name     "$1" 'name' "Policy $1"
		config_get      iface    "$1" 'interface'
		config_get      src_addr "$1" 'src_addr'
		config_get      src_port "$1" 'src_port'
		config_get      dst_addr "$1" 'dest_addr'
		config_get      dst_port "$1" 'dest_port'
		config_get      proto    "$1" 'proto'
		config_get      chain    "$1" 'chain' 'PREROUTING'
		config_get_bool enabled  "$1" 'enabled' 1
		[ "$enabled" -gt 0 ] || return 0
		uid="$1"
		proto="$(str_to_lower "$proto")"
		[ "$proto" = 'auto' ] && unset proto
		[ "$proto" = 'all' ] && unset proto
		output 2 "Routing '$name' via $iface "
		if [ -z "${src_addr}${src_port}${dst_addr}${dst_port}" ]; then
			errorSummary="${errorSummary}${_ERROR_}: Policy '$name' has no source/destination parameters\\n"
			output_fail; return 1;
		fi
		if [ -z "$iface" ]; then
			errorSummary="${errorSummary}${_ERROR_}: Policy '$name' has no assigned interface\\n"
			output_fail; return 1;
		fi
		if ! is_supported_interface "$iface"; then
			errorSummary="${errorSummary}${_ERROR_}: Policy '$name' has an unknown interface: '${iface}'\\n"
			output_fail; return 1;
		fi
		src_port="${src_port//  / }"; src_port="${src_port// /,}"; src_port="${src_port//,\!/ !}"; 
		dst_port="${dst_port//  / }"; dst_port="${dst_port// /,}"; dst_port="${dst_port//,\!/ !}";
		nftset 'destroy' "${iface}" "dst" "ip" "${uid}"
		nftset 'destroy' "${iface}" "src" "ip" "${uid}"
		nftset 'destroy' "${iface}" "src" "mac" "${uid}"
	fi

	if str_contains "$src_addr" '[ ;\{\}]'; then
		for i in $(str_extras_to_space "$src_addr"); do [ -n "$i" ] && policy_process "$name" "$iface" "$i" "$src_port" "$dst_addr" "$dst_port" "$proto" "$chain" "$uid"; done
	elif str_contains "$src_port" '[ ;\{\}]'; then
		for i in $(str_extras_to_space "$src_port"); do [ -n "$i" ] && policy_process "$name" "$iface" "$src_addr" "$i" "$dst_addr" "$dst_port" "$proto" "$chain" "$uid"; done
	elif str_contains "$dst_addr" '[ ;\{\}]'; then
		for i in $(str_extras_to_space "$dst_addr"); do [ -n "$i" ] && policy_process "$name" "$iface" "$src_addr" "$src_port" "$i" "$dst_port" "$proto" "$chain" "$uid"; done
	elif str_contains "$dst_port" '[ ;\{\}]'; then
		for i in $(str_extras_to_space "$dst_port"); do [ -n "$i" ] && policy_process "$name" "$iface" "$src_addr" "$src_port" "$dst_addr" "$i" "$proto" "$chain" "$uid"; done
	elif str_contains "$proto" '[ ;\{\}]'; then
		for i in $(str_extras_to_space "$proto"); do [ -n "$i" ] && policy_process "$name" "$iface" "$src_addr" "$src_port" "$dst_addr" "$dst_port" "$i" "$chain" "$uid"; done
	else
		if is_tor "$iface"; then
			:
#			policy_routing_tor "$name" "$iface" "$src_addr" "$src_port" "$dst_addr" "$dst_port" "$proto" "$chain" "$uid"
		else
			policy_routing "$name" "$iface" "$src_addr" "$src_port" "$dst_addr" "$dst_port" "$proto" "$chain" "$uid"
		fi
	fi

	if [ "$uid" = "$1" ] || [ -z "$9" ]; then # finished processing of config_foreach call
		if [ -n "$processPolicyWarning" ]; then
			warningSummary="${warningSummary}${processPolicyWarning}\\n"
			unset processPolicyWarning
		fi
		if [ -n "$processPolicyError" ]; then
			output_fail
			errorSummary="${errorSummary}${processPolicyError}\\n"
			unset processPolicyError
		else
			output_ok
		fi
	fi
}

policy_destroy_sets() {
	local uid="$1" enabled iface
	config_get_bool enabled  "$1" 'enabled' 1
	config_get iface "$1" 'interface'
	[ "$enabled" -gt 0 ] || return 0
	nftset 'destroy' "${iface}" "dst" "ip" "${uid}"
	nftset 'destroy' "${iface}" "src" "ip" "${uid}"
	nftset 'destroy' "${iface}" "src" "mac" "${uid}"
	output_ok
}

interface_routing() {
	local action="$1" tid="$2" mark="$3" iface="$4" gw4="$5" dev="$6" gw6="$7" dev6="$8" priority="$9"
	local dscp s=0 i ipv4_error=1 ipv6_error=1
	case "$action" in
		create)
			if [ -z "$tid" ] || [ -z "$mark" ] || [ -z "$iface" ]; then
				return 1
			fi
			sed -i "/$iface/d" /etc/iproute2/rt_tables
			ip route flush table "$tid" >/dev/null 2>&1
			if [ -n "$gw4" ] || [ "$strictMode" -ne 0 ]; then
				ipv4_error=0
				echo "$tid $iface" >> /etc/iproute2/rt_tables
				if [ -z "$gw4" ]; then
					ip -4 route add unreachable default table "$tid" >/dev/null 2>&1 || ipv4_error=1
				else
					ip -4 route add default via "$gw4" dev "$dev" table "$tid" >/dev/null 2>&1 || ipv4_error=1
				fi
# shellcheck disable=SC2086
				while read -r i; do
					idev="$(echo "$i" | grep -Eso 'dev [^ ]*' | awk '{print $2}')"
					if ! is_supported_iface_dev "$idev"; then
						ip -4 route add $i table "$tid" >/dev/null 2>&1 || ipv4_error=1
					fi
				done << EOF
				$(ip -4 route list table main)
EOF
				if [ -z "$(ip rule list fwmark "${mark}/${fwMask}" table "$tid")" ]; then
					ip rule add fwmark "${mark}/${fwMask}" table "$tid" priority "$priority" || ipv4_error=1
				fi
				nft flush chain inet "$nftTable" "${chainPrefix}_mark_${mark}"
				nft delete chain inet "$nftTable" "${chainPrefix}_mark_${mark}"
				nft add chain inet "$nftTable" "${chainPrefix}_mark_${mark}" || ipv4_error=1 
#				nft add rule inet "$nftTable" "${chainPrefix}_mark_${mark} counter" || ipv4_error=1
#				how to indicate fwmask?
				nft add rule inet "$nftTable" "${chainPrefix}_mark_${mark} counter mark set mark and ${fwMaskXor} xor ${mark}" || ipv4_error=1
				nft add rule inet "$nftTable" "${chainPrefix}_mark_${mark} return" || ipv4_error=1
			fi
			if [ -n "$ipv6Enabled" ]; then
				ipv6_error=0
				if { [ -n "$gw6" ] && [ "$gw6" != "::/0" ]; } || [ "$strictMode" -ne 0 ]; then
					if [ -z "$gw6" ] || [ "$gw6" = "::/0" ]; then
						ip -6 route add unreachable default table "$tid" || ipv6_error=1
					elif ip -6 route list table main | grep -q " dev $dev6 "; then
						while read -r i; do
							ip -6 route add "$i" table "$tid" >/dev/null 2>&1 || ipv6_error=1
						done << EOF
						$(ip -6 route list table main | grep " dev $dev6 ")
EOF
					else
						ip -6 route add "$(ip -6 -o a show "$dev6" | awk '{print $4}')" dev "$dev6" table "$tid" >/dev/null 2>&1 || ipv6_error=1
						ip -6 route add default dev "$dev6" table "$tid" >/dev/null 2>&1 || ipv6_error=1
					fi
				fi
				if [ -z "$(ip -6 rule list fwmark "${mark}/${fwMask}" table "$tid")" ]; then
					ip -6 rule add fwmark "${mark}/${fwMask}" table "$tid" priority "$priority" || ipv6_error=1
				fi
			fi
			if [ "$ipv4_error" -eq 0 ] || [ "$ipv6_error" -eq 0 ]; then
				dscp="$(uci -q get "${packageName}".config."${iface}"_dscp)"
				if [ "${dscp:-0}" -ge 1 ] && [ "${dscp:-0}" -le 63 ]; then
					nft add rule inet "$nftTable" "${chainPrefix}_prerouting ip dscp ${dscp} goto ${chainPrefix}_mark_${mark}" || s=1
				fi
				if [ "$iface" = "$icmpIface" ]; then
					nft add rule inet "$nftTable" "${chainPrefix}_output ip protocol icmp goto ${chainPrefix}_mark_${mark}" || s=1
				fi
			else
				s=1
			fi
			return "$s"
		;;
		create_user_set)
			nftset 'create_user_set' "$iface" 'dst' 'ip' '' '' "$mark" || s=1
			nftset 'create_user_set' "$iface" 'src' 'ip' '' '' "$mark" || s=1
			nftset 'create_user_set' "$iface" 'src' 'mac' '' '' "$mark" || s=1
			return "$s"
		;;
		delete|destroy)
			nft flush chain inet "$nftTable" "${chainPrefix}_mark_${mark}"
			nft delete chain inet "$nftTable" "${chainPrefix}_mark_${mark}"
			ip rule del fwmark "$mark" table "$tid" >/dev/null 2>&1
			ip route flush table "$tid" >/dev/null 2>&1
			sed -i "/$iface/d" /etc/iproute2/rt_tables
			nftset 'delete' "$iface" 'dst' 'ip'
			nftset 'delete' "$iface" 'src' 'ip'
			nftset 'delete' "$iface" 'src' 'mac'
			return "$s"
		;;
		delete_user_set)
			nftset 'delete_user_set' "$iface" 'dst' 'ip'
			nftset 'delete_user_set' "$iface" 'src' 'ip'
			nftset 'delete_user_set' "$iface" 'src' 'mac'
			return "$s"
		;;
		flush_user_set)
			nftset 'flush_user_set' "$iface" 'dst' 'ip'
			nftset 'flush_user_set' "$iface" 'src' 'ip'
			nftset 'flush_user_set' "$iface" 'src' 'mac'
			return "$s"
		;;
		reload)
			if [ -z "$tid" ] || [ -z "$mark" ] || [ -z "$iface" ]; then
				return 1
			fi
			ipv4_error=0
			ip -4 route del default table "$tid" >/dev/null 2>&1
			if [ -n "$gw4" ] || [ "$strictMode" -ne 0 ]; then
				if [ -z "$gw4" ]; then
					ip -4 route add unreachable default table "$tid" >/dev/null 2>&1 || ipv4_error=1
				else
					ip -4 route add default via "$gw4" dev "$dev" table "$tid" >/dev/null 2>&1 || ipv4_error=1
				fi
				if [ -z "$(ip rule list fwmark "${mark}/${fwMask}" table "$tid")" ]; then
					ip rule add fwmark "${mark}/${fwMask}" table "$tid" priority "$priority" || ipv4_error=1
				fi
			fi
			if [ -n "$ipv6Enabled" ]; then
				ip -6 route del default table "$tid" >/dev/null 2>&1
				ipv6_error=0
				if { [ -n "$gw6" ] && [ "$gw6" != "::/0" ]; } || [ "$strictMode" -ne 0 ]; then
					if [ -z "$gw6" ] || [ "$gw6" = "::/0" ]; then
						ip -6 route add unreachable default table "$tid" || ipv6_error=1
					else
						while read -r i; do
		# shellcheck disable=SC2086
							ip -6 route add $i table "$tid" >/dev/null 2>&1 || ipv6_error=1
						done << EOF
		$(ip -6 route list default table main | grep " dev $dev6 ")
EOF
					fi
				fi
				if [ -z "$(ip -6 rule list fwmark "${mark}/${fwMask}" table "$tid")" ]; then
					ip -6 rule add fwmark "${mark}/${fwMask}" table "$tid" priority "$priority" || ipv6_error=1
				fi
			fi
			if [ "$ipv4_error" -eq 0 ] || [ "$ipv6_error" -eq 0 ]; then
				s=0
			else
				s=1
			fi
			return "$s"
		;;
		restart)
			if [ -z "$tid" ] || [ -z "$mark" ] || [ -z "$iface" ]; then
				return 1
			fi
			ipv4_error=0
			ip -4 route del default table "$tid" >/dev/null 2>&1
			if [ -n "$gw4" ] || [ "$strictMode" -ne 0 ]; then
				if [ -z "$gw4" ]; then
					ip -4 route add unreachable default table "$tid" >/dev/null 2>&1 || ipv4_error=1
				else
					ip -4 route add default via "$gw4" dev "$dev" table "$tid" >/dev/null 2>&1 || ipv4_error=1
				fi
				if [ -z "$(ip rule list fwmark "${mark}/${fwMask}" table "$tid")" ]; then
					ip rule add fwmark "${mark}/${fwMask}" table "$tid" priority "$priority" || ipv4_error=1
				fi
				nft flush chain inet "$nftTable" "${chainPrefix}_mark_${mark}"
				nft delete chain inet "$nftTable" "${chainPrefix}_mark_${mark}"
				nft add chain inet "$nftTable" "${chainPrefix}_mark_${mark}" || ipv4_error=1 
#				nft add rule inet "$nftTable" "${chainPrefix}_mark_${mark} counter" || ipv4_error=1
#				how to indicate fwmask?
				nft add rule inet "$nftTable" "${chainPrefix}_mark_${mark} counter mark set mark and ${fwMaskXor} xor ${mark}" || ipv4_error=1
				nft add rule inet "$nftTable" "${chainPrefix}_mark_${mark} return" || ipv4_error=1
			fi
			if [ -n "$ipv6Enabled" ]; then
				ip -6 route del default table "$tid" >/dev/null 2>&1
				ipv6_error=0
				if { [ -n "$gw6" ] && [ "$gw6" != "::/0" ]; } || [ "$strictMode" -ne 0 ]; then
					if [ -z "$gw6" ] || [ "$gw6" = "::/0" ]; then
						ip -6 route add unreachable default table "$tid" || ipv6_error=1
					else
						while read -r i; do
		# shellcheck disable=SC2086
							ip -6 route add $i table "$tid" >/dev/null 2>&1 || ipv6_error=1
						done << EOF
		$(ip -6 route list default table main | grep " dev $dev6 ")
EOF
					fi
				fi
				if [ -z "$(ip -6 rule list fwmark "${mark}/${fwMask}" table "$tid")" ]; then
					ip -6 rule add fwmark "${mark}/${fwMask}" table "$tid" priority "$priority" || ipv6_error=1
				fi
			fi
			if [ "$ipv4_error" -eq 0 ] || [ "$ipv6_error" -eq 0 ]; then
				dscp="$(uci -q get "${packageName}".config."${iface}"_dscp)"
				if [ "${dscp:-0}" -ge 1 ] && [ "${dscp:-0}" -le 63 ]; then
					nft add rule inet "$nftTable" "${chainPrefix}_prerouting ip dscp ${dscp} goto ${chainPrefix}_mark_${mark}" || s=1
				fi
				if [ "$iface" = "$icmpIface" ]; then
					nft add rule inet "$nftTable" "${chainPrefix}_output ip protocol icmp goto ${chainPrefix}_mark_${mark}" || s=1
				fi
			else
				s=1
			fi
			return "$s"
		;;
	esac
}

interface_process() {
	local gw4 gw6 dev dev6 s=0 dscp iface="$1" action="$2" reloadedIface="$3"
	local displayText dispDev dispGw4 dispGw6 dispStatus

	if [ "$iface" = 'all' ] && [ "$action" = 'prepare' ]; then
		config_load 'network'
		ifaceTableID="$wanTableID"
		ifaceMark="$(printf '0x%06x' "$wanMark")"
		ifacePriority="$wanPriority"
		return
	fi

	is_supported_interface "$iface" || return 0
	is_wan6 "$iface" && return 0
	[ $((ifaceMark)) -gt $((fwMask)) ] && return 1

	network_get_device dev "$iface"
	if is_wan "$iface" && [ -n "$wanIface6" ]; then
		network_get_device dev6 "$wanIface6"
	fi

	[ -z "$dev6" ] && dev6="$dev"
	[ -z "$ifaceTableID" ] && ifaceTableID="$wanTableID"
	[ -z "$ifaceMark" ] && ifaceMark="$(printf '0x%06x' "$wanMark")"
	[ -z "$ifacePriority" ] && ifacePriority="$wanPriority"

	case "$action" in
		enumerate)
			eval "mark_${iface//-/_}"='$ifaceMark'
			eval "tid_${iface//-/_}"='$ifaceTableID'
			pbr_get_gateway gw4 "$iface" "$dev"
			pbr_get_gateway6 gw6 "$iface" "$dev6"
			dispGw4="${gw4:-0.0.0.0}"
			dispGw6="${gw6:-::/0}"
			[ "$iface" != "$dev" ] && dispDev="$dev"
			is_default_dev "$dev" && dispStatus="${__OK__}"
			displayText="${iface}/${dispDev:+$dispDev/}${dispGw4}${ipv6Enabled:+/$dispGw6}"
			gatewaySummary="${gatewaySummary}${displayText}${dispStatus:+ $dispStatus}\\n"
			interface_routing 'flush_user_set' "$ifaceTableID" "$ifaceMark" "$iface" "$gw4" "$dev" "$gw6" "$dev6" "$ifacePriority"
			;;
		destroy)
			interface_routing 'destroy' "${ifaceTableID}" "${ifaceMark}" "${iface}"
			output_ok
			;;
		create)
			eval "mark_${iface//-/_}"='$ifaceMark'
			eval "tid_${iface//-/_}"='$ifaceTableID'
			pbr_get_gateway gw4 "$iface" "$dev"
			pbr_get_gateway6 gw6 "$iface" "$dev6"
			dispGw4="${gw4:-0.0.0.0}"
			dispGw6="${gw6:-::/0}"
			[ "$iface" != "$dev" ] && dispDev="$dev"
			is_default_dev "$dev" && dispStatus="${__OK__}"
			displayText="${iface}/${dispDev:+$dispDev/}${dispGw4}${ipv6Enabled:+/$dispGw6}"
			if [ -z "$reloadedIface" ]; then
				output 2 "Setting up routing for '$displayText' "
				if interface_routing 'create' "$ifaceTableID" "$ifaceMark" "$iface" "$gw4" "$dev" "$gw6" "$dev6" "$ifacePriority"; then
					gatewaySummary="${gatewaySummary}${displayText}${dispStatus:+ $dispStatus}\\n"
					output_ok
				else
					errorSummary="${errorSummary}${_ERROR_}: Failed to set up '$displayText'\\n"
					output_fail
				fi
			elif [ "$iface" = "$reloadedIface" ]; then
				output 2 "Reloading routing for '$displayText' "
				if interface_routing 'reload' "$ifaceTableID" "$ifaceMark" "$iface" "$gw4" "$dev" "$gw6" "$dev6" "$ifacePriority"; then
					gatewaySummary="${gatewaySummary}${displayText}${dispStatus:+ $dispStatus}\\n"
					output_ok
				else
					errorSummary="${errorSummary}${_ERROR_}: Failed to reload '$displayText'\\n"
					output_fail
				fi
			else
				gatewaySummary="${gatewaySummary}${displayText}${dispStatus:+ $dispStatus}\\n"
			fi
			;;
		create_user_set)
			if [ -z "$reloadedIface" ] || [ "$iface" = "$reloadedIface" ]; then
				interface_routing 'create_user_set' "$ifaceTableID" "$ifaceMark" "$iface" "$gw4" "$dev" "$gw6" "$dev6" "$ifacePriority"
			fi
			;;
	esac
	ifaceTableID="$((ifaceTableID + 1))"
	ifaceMark="$(printf '0x%06x' $((ifaceMark + wanMark)))"
	ifacePriority="$((ifacePriority - 1))"
	return $s
}

interface_process_tor() {
	local s=0 iface="$1" action="$2" displayText nftset
	case "$action" in
		enumerate)
			displayText="${iface}/53->${dnsPort}/80,443->${transPort}"
			gatewaySummary="${gatewaySummary}${displayText}\\n"
			;;
		destroy)
			for i in PREROUTING FORWARD INPUT OUTPUT; do
				ipt -t nat -D "${i}" -m mark --mark "0x0/${fwMask}" -j "${chainPrefix}_${i}"
				ipt -t nat -F "${chainPrefix}_${i}"; ipt -t nat -X "${chainPrefix}_${i}";
			done
			output_ok
			;;
		create)
			output 2 "Creating TOR redirects "
			dnsPort="$(grep -m1 DNSPort /etc/tor/torrc | awk -F: '{print $2}')"
			transPort="$(grep -m1 TransPort /etc/tor/torrc | awk -F: '{print $2}')"
			dnsPort="${dnsPort:-9053}"; transPort="${transPort:-9040}"; 
			for i in $usedChainsList; do
				ipt -t nat -N "${chainPrefix}_${i}"
				ipt -t nat "$ruleCreateOption" "$i" -m mark --mark "0x0/${fwMask}" -j "${chainPrefix}_${i}"
			done
			if ips 'create' "$iface" 'dst' 'net' && ips 'flush' "$iface" 'dst' 'net'; then
				nftset="${setPrefix}_${iface}_dst_net"
				for i in $usedChainsList; do
					ipt -t nat -I "${chainPrefix}_${i}" -p udp -m udp --dport 53 -m set --match-set "${nftset}" dst -j REDIRECT --to-ports "$dnsPort" -m comment --comment "TorDNS-UDP" || s=1
					ipt -t nat -I "${chainPrefix}_${i}" -p tcp -m tcp --dport 80 -m set --match-set "${nftset}" dst -j REDIRECT --to-ports "$transPort" -m comment --comment "TorHTTP-TCP" || s=1
					ipt -t nat -I "${chainPrefix}_${i}" -p udp -m udp --dport 80 -m set --match-set "${nftset}" dst -j REDIRECT --to-ports "$transPort" -m comment --comment "TorHTTP-UDP" || s=1
					ipt -t nat -I "${chainPrefix}_${i}" -p tcp -m tcp --dport 443 -m set --match-set "${nftset}" dst -j REDIRECT --to-ports "$transPort" -m comment --comment "TorHTTPS-TCP" || s=1
					ipt -t nat -I "${chainPrefix}_${i}" -p udp -m udp --dport 443 -m set --match-set "${nftset}" dst -j REDIRECT --to-ports "$transPort" -m comment --comment "TorHTTPS-UDP" || s=1
				done
			else
				s=1
			fi
			displayText="${iface}/53->${dnsPort}/80,443->${transPort}"
			if [ "$s" -eq 0 ]; then
				gatewaySummary="${gatewaySummary}${displayText}\\n"
				output_ok
			else
				errorSummary="${errorSummary}${_ERROR_}: Failed to set up '$displayText'\\n"
				output_fail
			fi
			;;
	esac
	return $s
}

user_file_process() {
	local path enabled shellBin="${SHELL:-/bin/ash}"
	config_get_bool enabled "$1" 'enabled' 1
	config_get      path    "$1" 'path'
	[ "$enabled" -gt 0 ] || return 0
	if [ ! -s "$path" ]; then
		errorSummary="${errorSummary}${_ERROR_}: Custom user file '$path' not found or empty!\\n"
		output_fail
		return 1
	fi
	if ! $shellBin -n "$path"; then
		errorSummary="${errorSummary}${_ERROR_}: Syntax error in custom user file '$path'!\\n"
		output_fail
		return 1
	fi
	output 2 "Running $path "
# shellcheck disable=SC1090
	if ! . "$path"; then
		errorSummary="${errorSummary}${_ERROR_}: Error running custom user file '$path'!\\n"
		if grep -q -w 'curl' "$path" && ! is_present 'curl'; then
			errorSummary="${errorSummary}${_ERROR_}: Use of 'curl' is detected in custom user file '$path', but 'curl' isn't installed!\\n"
			errorSummary="${errorSummary}${_ERROR_}: If 'curl' is needed, install it with 'opkg update; opkg install curl;' command in CLI.\\n"
		fi
		output_fail
		return 1
	else
		output_ok
		return 0
	fi
}

json() {
	local action="$1" param="$2" value="$3"
# shellcheck disable=SC2034
	local gateway error warning mode i
	if [ -s "$jsonFile" ]; then
		json_load_file "$jsonFile" 2>/dev/null
		json_select 'status' 2>/dev/null
		for i in gateway error warning mode; do
			json_get_var $i "$i" 2>/dev/null
		done
	fi
	case "$action" in
		get)
			printf "%b" "$(eval echo "\$$param")"; return;;
		add)
			eval "$param"='$(eval echo "\$$param")${value}';;
		del)
			case "$param" in
				all)
					unset gateway error warning mode;;
				*)
					unset "$param";;
			esac
			;;
		set)
			eval "$param"='$value';;
	esac
	json_init
	json_add_object 'status'
	json_add_string version "$PKG_VERSION"
	for i in gateway error warning mode; do
		json_add_string "$i" "$(eval echo "\$$i")"
	done 
	json_close_object
	json_dump > "$jsonFile"
	sync
}

boot() { rc_procd start_service && rc_procd service_triggers; }

start_service() {
	local dnsmasqStoredHash dnsmasqNewHash i reloadedIface="$1"
	is_enabled 'on_start' || return 1
	is_wan_up || return 1

	if [ -n "$reloadedIface" ] && ! is_supported_interface "$reloadedIface"; then
		return 0
	fi

	if [ -n "$(json get error)" ] || [ -n "$(json get warning)" ]; then
		serviceStartTrigger='on_start'
		unset reloadedIface
	elif ! is_service_running; then
		serviceStartTrigger='on_start'
		unset reloadedIface
	elif [ -z "$(json get gateway)" ]; then
		serviceStartTrigger='on_start'
		unset reloadedIface
	elif [ -n "$reloadedIface" ]; then
		serviceStartTrigger='on_iface_reload'
	else
		serviceStartTrigger='on_reload'
	fi

	insert_lock
	case $serviceStartTrigger in
		on_iface_reload)
			output 1 "Reloading Interface: $reloadedIface "
			interface_process 'all' 'prepare'
			config_foreach interface_process 'interface' 'create' "$reloadedIface"
			output 1 '\n'
			;;
		on_reload)
			if [ -s "$dnsmasqFile" ]; then
				dnsmasqStoredHash="$(md5sum $dnsmasqFile | awk '{ print $1; }')"
				rm -f "$dnsmasqFile"
			fi
			for i in $usedChainsList; do
				case "$i" in
					FORWARD) nft add chain inet "$nftTable" "${chainPrefix}_forward" '{ type filter hook forward priority 0; policy accept; }';;
					INPUT) nft add chain inet "$nftTable" "${chainPrefix}_input" '{ type filter hook input priority 0; policy accept; }';;
					OUTPUT) nft add chain inet "$nftTable" "${chainPrefix}_output" '{ type route hook output priority 0; policy accept; }';;
					PREROUTING) nft add chain inet "$nftTable" "${chainPrefix}_prerouting" '{ type filter hook prerouting priority 0; policy accept; }';;
				esac
			done
			interface_process 'all' 'prepare'; config_foreach interface_process 'interface' 'enumerate';
#			interface_process_tor 'tor' 'destroy'; is_tor_running && interface_process_tor 'tor' 'enumerate';
			if is_config_enabled 'policy'; then
				output 1 'Processing Policies '
				config_load "$packageName"; config_foreach policy_process 'policy';
				output 1 '\n'
			fi
			if is_config_enabled 'include'; then
				interface_process 'all' 'prepare'
				config_foreach interface_process 'interface' 'create_user_set'
				output 1 'Processing User File(s) '
				config_load "$packageName"
				config_foreach user_file_process 'include'
				output 1 '\n'
			fi
			if [ -s "$dnsmasqFile" ]; then
				dnsmasqNewHash="$(md5sum $dnsmasqFile | awk '{ print $1; }')"
			fi
			[ "$dnsmasqNewHash" != "$dnsmasqStoredHash" ] && dnsmasq_restart
			;;
		on_start|*)
			if [ -s "$dnsmasqFile" ]; then
				dnsmasqStoredHash="$(md5sum $dnsmasqFile | awk '{ print $1; }')"
				rm -f "$dnsmasqFile"
			fi
			for i in $usedChainsList; do
				case "$i" in
					FORWARD) nft add chain inet "$nftTable" "${chainPrefix}_forward" '{ type filter hook forward priority 0; policy accept; }';;
					INPUT) nft add chain inet "$nftTable" "${chainPrefix}_input" '{ type filter hook input priority 0; policy accept; }';;
					OUTPUT) nft add chain inet "$nftTable" "${chainPrefix}_output" '{ type route hook output priority 0; policy accept; }';;
					PREROUTING) nft add chain inet "$nftTable" "${chainPrefix}_prerouting" '{ type filter hook prerouting priority 0; policy accept; }';;
				esac
			done
			output 1 'Processing Interfaces '
			interface_process 'all' 'prepare'
			config_foreach interface_process 'interface' 'create'
#			interface_process_tor 'tor' 'destroy'; is_tor_running && interface_process_tor 'tor' 'create'
			ip route flush cache
			output 1 '\n'
			if is_config_enabled 'policy'; then
				output 1 'Processing Policies '
				config_load "$packageName"; config_foreach policy_process 'policy';
				output 1 '\n'
			fi
			if is_config_enabled 'include'; then
				interface_process 'all' 'prepare'; config_foreach interface_process 'interface' 'create_user_set';
				output 1 'Processing User File(s) '
				config_load "$packageName"; config_foreach user_file_process 'include';
				output 1 '\n'
			fi
			if [ -s "$dnsmasqFile" ]; then
				dnsmasqNewHash="$(md5sum $dnsmasqFile | awk '{ print $1; }')"
			fi
			[ "$dnsmasqNewHash" != "$dnsmasqStoredHash" ] && dnsmasq_restart
			;;
	esac
	remove_lock

	if [ -z "$gatewaySummary" ]; then
		errorSummary="${errorSummary}${_ERROR_}: failed to set up any gateway!\\n"
	fi
	procd_open_instance "main"
	procd_set_param command /bin/true
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_open_data
	json_add_array 'status'
	json_add_object ''
	[ -n "$gatewaySummary" ] && json_add_string gateway "$gatewaySummary"
	[ -n "$errorSummary" ] && json_add_string error "$errorSummary"
	[ -n "$warningSummary" ] && json_add_string warning "$warningSummary"
	if [ "$strictMode" -ne 0 ] && str_contains "$gatewaySummary" '0.0.0.0'; then
		json_add_string mode "strict"
	fi
	json_close_object
	json_close_array
	procd_close_data
	procd_close_instance
	json set 'gateway' "$gatewaySummary"
	json set 'error' "$errorSummary"
	json set 'warning' "$warningSummary"
	if [ "$strictMode" -ne 0 ] && str_contains "$gatewaySummary" '0.0.0.0'; then
		json set 'mode' 'strict'
	fi
}

service_started() {
	[ -n "$gatewaySummary" ] && output "$serviceName started with gateways:\\n${gatewaySummary}"
	[ -n "$errorSummary" ] && output "${errorSummary}"
	[ -n "$warningSummary" ] && output "${warningSummary}"
	if [ -n "$errorSummary" ]; then
		return 2
	elif [ -n "$warningSummary" ]; then
		return 1
	else
		return 0
	fi
}

stop_service() {
	local i
	is_service_running || return 0
	load_package_config
	for i in forward input output prerouting; do
		nft delete chain inet "$nftTable" "${chainPrefix}_${i}"
	done
	output "Resetting Interfaces "
	config_load 'network'
	config_foreach interface_process 'interface' 'destroy'
#	interface_process_tor 'tor' 'destroy'
	output "\\n"
	output "Resetting Policies "
	config_load "$packageName"
	config_foreach policy_destroy_sets 'policy'
	output "\\n"
	ip route flush cache
	unset ifaceTableID; unset ifaceMark;
	if [ -s "$dnsmasqFile" ]; then
		rm -f "$dnsmasqFile"
		dnsmasq_restart
	fi
	if [ "$serviceEnabled" -ne 0 ]; then
		output "$serviceName stopped "; output_okn;
	fi
}

reload_interface() { rc_procd start_service "$1"; }

service_triggers() {
	local n
	is_enabled || return 1

	if [ "$procdReloadDelay" -gt 0 ] && [ "$procdReloadDelay" -lt 100 ]; then
# shellcheck disable=SC2034
		PROCD_RELOAD_DELAY=$(( procdReloadDelay * 1000 ))
	fi

	procd_open_validate
		validate_config
		validate_policy
		validate_include
	procd_close_validate

	procd_open_trigger
		procd_add_reload_trigger 'openvpn'
		if type procd_add_service_trigger >/dev/null 2>&1; then
			procd_add_service_trigger "service.restart" "firewall" /etc/init.d/${packageName} reload
		fi
		procd_add_config_trigger "config.change" "${packageName}" /etc/init.d/${packageName} reload
		for n in $ifSupported; do 
			procd_add_interface_trigger "interface.*" "$n" /etc/init.d/${packageName} reload_interface "$n"
		done
	procd_close_trigger

	if [ "$serviceStartTrigger" = 'on_start' ]; then
		output 3 "$serviceName monitoring interfaces: ${ifSupported}\\n"
	fi
}

status_service() {
	local dist vers out id s param status set_d set_p tableCount i=0 dev dev6 j
	readonly _SEPARATOR_='============================================================'
	is_enabled

	json_load "$(ubus call system board)"; json_select release; json_get_var dist distribution; json_get_var vers version
	if [ -n "$wanIface4" ]; then
		network_get_gateway wanGW4 "$wanIface4"
		network_get_device dev "$wanIface4"
	fi
	if [ -n "$wanIface6" ]; then
		network_get_device dev6 "$wanIface6"
		wanGW6=$(ip -6 route show | grep -m1 " dev $dev6 " | awk '{print $1}')
		[ "$wanGW6" = "default" ] && wanGW6=$(ip -6 route show | grep -m1 " dev $dev6 " | awk '{print $3}')
	fi
	while [ "${1:0:1}" = "-" ]; do param="${1//-/}"; eval "set_$param=1"; shift; done
	[ -e "/var/${packageName}-support" ] && rm -f "/var/${packageName}-support"
	status="$serviceName running on $dist $vers."
	[ -n "$wanIface4" ] && status="$status WAN (IPv4): ${wanIface4}/${dev}/${wanGW4:-0.0.0.0}."
	[ -n "$wanIface6" ] && status="$status WAN (IPv6): ${wanIface6}/${dev6}/${wanGW6:-::/0}."
	{
		echo "$status"
		echo "$_SEPARATOR_"
		dnsmasq --version 2>/dev/null | sed '/^$/,$d'
		if [ -n "$1" ]; then
			echo "$_SEPARATOR_"
			echo "Resolving domains"
			for i in $1; do
				echo "$i: $(resolveip "$i" | tr '\n' ' ')"
			done
		fi

		echo "$_SEPARATOR_"
		echo "Routes/IP Rules"
		tableCount=$(ip rule list | grep -c 'fwmark') || tableCount=0
		if [ -n "$set_d" ]; then route; else route | grep '^default'; fi
		if [ -n "$set_d" ]; then ip rule list; fi
		i=0; while [ $i -lt $tableCount ]; do 
			echo ""
			echo "IPv4 Table $((wanTableID + i)): $(ip -4 route show table $((wanTableID + i)))"
			echo "IPv4 Table $((wanTableID + i)) Rules:"
			ip -4 rule list table "$((wanTableID + i))"
			i=$((i + 1))
		done

		if [ -n "$ipv6Enabled" ]; then
			i=0; while [ $i -lt $tableCount ]; do
				ip -6 route show table $((wanTableID + i)) | while read -r param; do
					echo "IPv6 Table $((wanTableID + i)): $param"
				done
				i=$((i + 1))
			done
		fi

		for j in Mangle NAT; do
			if [ -z "$set_d" ]; then
				for i in $usedChainsList; do
					if iptables -v -t "$(str_to_lower $j)" -S "${chainPrefix}_${i}" >/dev/null 2>&1; then
						echo "$_SEPARATOR_"
						echo "$j IP Table: $i"
						iptables -v -t "$(str_to_lower $j)" -S "${chainPrefix}_${i}"
						if [ -n "$ipv6Enabled" ]; then
							echo "$_SEPARATOR_"
							echo "$j IPv6 Table: $i"
							ip6tables -v -t "$(str_to_lower $j)" -S "${chainPrefix}_${i}"
						fi
					fi
				done
			else
				echo "$_SEPARATOR_"
				echo "$j IP Table"
				iptables -L -t "$(str_to_lower $j)"
				if [ -n "$ipv6Enabled" ]; then
					echo "$_SEPARATOR_"
					echo "$j IPv6 Table"
					ip6tables -L -t "$(str_to_lower $j)"
				fi
			fi
			i=0; ifaceMark="$wanMark";
			while [ $i -lt $tableCount ]; do
				if iptables -v -t "$(str_to_lower $j)" -S "${chainPrefix}_mark_${ifaceMark}" >/dev/null 2>&1; then
					echo "$_SEPARATOR_"
					echo "$j IP Table MARK Chain: ${chainPrefix}_mark_${ifaceMark}"
					iptables -v -t "$(str_to_lower $j)" -S "${chainPrefix}_mark_${ifaceMark}"
					ifaceMark="$(printf '0x%06x' $((ifaceMark + wanMark)))";
				fi
				i=$((i + 1))
			done
		done

		echo "$_SEPARATOR_"
		echo "Current ipsets"
		ipset save
		if [ -s "$dnsmasqFile" ]; then
			echo "$_SEPARATOR_"
			echo "DNSMASQ ipsets"
			cat "$dnsmasqFile"
		fi
		echo "$_SEPARATOR_"
	} | tee -a /var/${packageName}-support
	if [ -n "$set_p" ]; then
		printf "%b" "Pasting to paste.ee... "
		if is_present 'curl' && is_variant_installed 'libopenssl' && is_installed 'ca-bundle'; then
			json_init; json_add_string "description" "${packageName}-support"
			json_add_array "sections"; json_add_object '0'
			json_add_string "name" "$(uci -q get system.@system[0].hostname)"
			json_add_string "contents" "$(cat /var/${packageName}-support)"
			json_close_object; json_close_array; payload=$(json_dump)
			out=$(curl -s -k "https://api.paste.ee/v1/pastes" -X "POST" -H "Content-Type: application/json" -H "X-Auth-Token:uVOJt6pNqjcEWu7qiuUuuxWQafpHhwMvNEBviRV2B" -d "$payload")
			json_load "$out"; json_get_var id id; json_get_var s success
			[ "$s" = "1" ] && printf "%b" "https://paste.ee/p/$id $__OK__\\n" || printf "%b" "$__FAIL__\\n"
			[ -e "/var/${packageName}-support" ] && rm -f "/var/${packageName}-support"
		else
			printf "%b" "$__FAIL__\\n"
			printf "%b" "$_ERROR_: curl, libopenssl or ca-bundle were not found!\\nRun 'opkg update; opkg install curl libopenssl ca-bundle' to install them.\\n"
		fi
	else
		printf "%b" "Your support details have been logged to '/var/${packageName}-support'. $__OK__\\n"
	fi
}

# shellcheck disable=SC2120
validate_config() {
	uci_validate_section "${packageName}" config "${1}" \
		'enabled:bool:0' \
		'strict_enforcement:bool:1' \
		'ipv6_enabled:bool:0' \
		'src_set:bool:0' \
		'dest_set:bool:0' \
		'resolver_set::or("", "none", "dnsmasq.ipset", "dnsmasq.nftset")' \
		'verbosity:range(0,2):1' \
		'wan_tid:integer:201' \
		'wan_fw_mark:hex(8)' \
		'fw_mask:hex(8)' \
		'icmp_interface:string' \
		'ignored_interface:list(string)' \
		'supported_interface:list(string)' \
		'boot_timeout:integer:30' \
		'rule_create_option:or("", "add", "insert")' \
		'procd_reload_delay:integer:0' \
		'webui_enable_column:bool:0' \
		'webui_protocol_column:bool:0' \
		'webui_supported_protocol:list(string)' \
		'webui_chain_column:bool:0' \
		'webui_sorting:bool:1' \
		'webui_show_ignore_target:bool:0'
}

# shellcheck disable=SC2120
validate_policy() {
	uci_validate_section "${packageName}" policy "${1}" \
		'name:string' \
		'enabled:bool:0' \
		'interface:network' \
		'proto:or(string)' \
		'chain:or("", "PREROUTING", "FORWARD", "INPUT", "OUTPUT")' \
		'src_addr:list(neg(or(host,network,macaddr)))' \
		'src_port:list(neg(or(portrange, string)))' \
		'dest_addr:list(neg(host))' \
		'dest_port:list(neg(or(portrange, string)))'
}

# shellcheck disable=SC2120
validate_include() {
	uci_validate_section "${packageName}" include "${1}" \
		'path:string' \
		'enabled:bool:0'
}
